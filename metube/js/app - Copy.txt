const IMAGE_FORMATS = {
  "png": "png",
  "jpeg": "jpeg"
};

const VIDEO_FORMATS = {
  "mp4": "mp4"
};

const AUDIO_FORMATS = {
  "mp3": "mp3",
  "windows_media_audio": "windows media audio"
};

const ANIME = {
  "gif": "gif"
};

let parent;

app = {};

window.addEventListener('load', setUpDrawer);
window.addEventListener('resize', setUpDrawer);

function setUpDrawer() {
 let drawer = document.querySelector(".drawer-container");
 let mainWidth = document.querySelector('main').offsetWidth;
 let contents = document.getElementById("content-container");

 //keep the navbar opened when viewport is big enough to contain it and closed when small
 if(window.innerWidth > 1293) {  //NOTE: used in media query as well
    if(!drawer.classList.contains("persistent")){  //only add when not there
       drawer.classList.add("persistent");
       drawer.classList.remove("drawer-hidden");
       contents.style.marginLeft = '240px';
    }
 } else {
      drawer.classList.remove("persistent");
      drawer.classList.add("drawer-hidden");
      contents.style.marginLeft = "0";
    }
}

let hamburger = document.querySelector(".hamburger");
hamburger.addEventListener('click', function(e) {
  let drawer = document.querySelector(".drawer-container");
  let contents = document.getElementById("content-container");

  //on wide viewport and with drawer open, close drawer and reset margin left
  if(drawer.classList.contains("persistent")) {
      if (contents.style.marginLeft == '240px') {
          drawer.classList.toggle("drawer-hidden");
          contents.style.marginLeft = '0';
      } else {
          drawer.classList.toggle("drawer-hidden");
          contents.style.marginLeft = '240px';
      }
  }
  //on smaller viewport, let drawer float on top and prevent content from being pused to the right
  else {
      contents.style.marginLeft = '0';
      //drawer.style.top = "0";
      drawer.classList.toggle("drawer-hidden");
  }
  e.stopPropagation();
});


let mobileSearchBar = document.querySelector("#mobile-search");
let searchIcon = document.querySelector(".mobile-search-icon");
searchIcon.addEventListener("click", function(e) {
  mobileSearchBar.style.display = "flex";
});

let closeSearchIcon = document.querySelector("#close-search");
closeSearchIcon.addEventListener("click", function(e) {
  mobileSearchBar.style.display = "";
});

let closeModal = function(element, cssclass) {
  element.classList.remove(cssclass);

  //reset body to scrollable
  let body = document.body;
  body.classList.toggle("noscroll");

  //remove window event listener
  window.removeEventListener("mouseup", mouseUpEvent);
};

let removeChildNodes = function(parentNode) {
  let childrenLength = parentNode.children.length;

  //remove children expect for the first one
  while (childrenLength > 1){
      parentNode.removeChild(parentNode.children[1]);
      childrenLength--;
  }
};

let createMediaFormatElement = function(attribute, text) {
  //create an option element, add text and attribute to it. Append the element to the DOM

  let option = document.createElement("OPTION");
  let textNode = document.createTextNode(text);
  option.append(textNode);
  option.setAttribute("value", attribute);

  let mediaFormat = document.querySelector("#media-format");
  mediaFormat.appendChild(option);
};

let formats = function(obj) {
  let mediaFormat = document.querySelector("#media-format");

  //remove children
  removeChildNodes(mediaFormat);

  //create element
  for (let key in obj) {
      createMediaFormatElement(key, obj[key]);
  }
};

let media = document.querySelector("#media-type");
if (media) {
  media.addEventListener("change", function(event) {
      let value = event.target.value;
      if (value == "video") {
          formats(VIDEO_FORMATS);
      }
      else if (value == "audio") {
          formats(AUDIO_FORMATS);
      }
      else if (value == "image") {
          formats(IMAGE_FORMATS);
      }
      else {
          formats(ANIME);
      }
  });
}

let adjustLeftPosition = function() {
  let metubeHeaderWidth = document.querySelector(".metube-header-wrapper").offsetWidth;

  //we want the element to always be to the left of the signedin Icon
  let signedInIconWidth = document.querySelector(".metube-signin").offsetWidth; //change .metube-signin to .signedin when we have used PHP to configure signin

  let signedInWrapper = document.querySelector(".signedin-wrapper");
  let signedInWrapperWidth = signedInWrapper.offsetWidth;

  //adjust left position
  let littleOffset = 6;
  let left = (metubeHeaderWidth - (signedInIconWidth + littleOffset)) - signedInWrapperWidth;

  if (left > 0) signedInWrapper.style.left = left + "px";
  else signedInWrapper.style.left = 0 + "px";
};

window.addEventListener("load", adjustLeftPosition);
window.addEventListener("resize", adjustLeftPosition);

let accountOptions = document.querySelector(".signedin-wrapper");
//Change this to the proper css class after PHP is linked
let accountOptionsButton = document.querySelector(".signedin");
accountOptionsButton.addEventListener("click", function(e) {
  accountOptions.classList.add("show");

  //prevent body from srolling
  let body = document.body;
  body.classList.toggle("noscroll");

  parent = accountOptions;
  addWindowListener();
});

function addWindowListener() {
  window.addEventListener("mouseup", mouseUpEvent);
}

//event listener cannot be removed without a handler, we want to remove the window listener after we are done with it
let mouseUpEvent = function () {
  //if the target's parent is upload. in other words, if parent has target as a child close upload
  if(!(parent.contains(event.target))) closeModal(parent, "show");
};


let setUpMessaging = function() {
  let littleOffset = 8;
  let messageContainer = document.querySelector(".message-wrapper");
  //console.log(messageContainer.offsetWidth);
  let metubeHeaderWidth = document.querySelector(".metube-header-wrapper").offsetWidth;

  //get the widths the elements in the header has taken on the screen
  let messageIconWidth = document.querySelector(".chat").offsetWidth;
  let signedInIconWidth = document.querySelector(".metube-signin").offsetWidth; //this or sigin image. NOTE: USE UNARY OPERATOR TO GET EITHER

  //we want the element to always be to the left of the message
  let widthFromRightToMessageIcon = signedInIconWidth + messageIconWidth;
  let messageContainerWidth;
  let left;

  /* first, set the width of the container, with display:none; the with can't be calculated
     and we need this to start adjustments
  */

  //
  if (metubeHeaderWidth < 450) {
      messageContainer.style.maxWidth = 385 + "px";
      messageContainer.style.top = 40 + "px";
      messageContainerWidth = messageContainer.offsetWidth;
      messageContainer.style.left = 0 + "px";
  }
  else {
      //reduce the width of the container as the screen becomes smaller. subtracting current screen width from the total width of elements from right to message icon, gives just enough width for message wrapper and not cover the users entire screen.

      messageContainerWidth = messageContainer.offsetWidth;
      //console.log(messageContainerWidth);
      //reset width back to default
      if (messageContainerWidth == 385) {messageContainerWidth = 450;}
      messageContainer.style.top = 8 + "px";

      //position to the left of message icon
      left = metubeHeaderWidth - (widthFromRightToMessageIcon + messageContainerWidth + littleOffset);
      //console.log(left);
      if (left < 0) {
          if (metubeHeaderWidth < 537) messageContainer.style.top = 40 + "px";
          messageContainer.style.left = 0 + "px";
          //start reducing the width of messageContainer
          messageContainer.style.maxWidth = (messageContainerWidth - 1) + "px";

      } else {
          messageContainer.style.left = left + "px";
      }
  }
};

let messageIcon = document.querySelector(".chat");
messageIcon.addEventListener("click", function() {
  let messageContainer = document.querySelector(".message-wrapper");
  //displaying before calling setUpMessaging enables width of messageContainer to be determined
  messageContainer.classList.add("show");
  setUpMessaging();

  //prevent body from srolling
  let body = document.body;
  body.classList.toggle("noscroll");

  parent = messageContainer;
  addWindowListener();
});

window.addEventListener("load", setUpMessaging);
window.addEventListener("resize", setUpMessaging);

let channelLeftArrow = document.querySelector(".nav-icon-left");
let channelRightArrow = document.querySelector(".nav-icon-right");
let channelNavItems = document.querySelectorAll(".channel-navs-item");
let slider = document.querySelector("#channel-navs-content");

index = 0;
leftSum = 0;
if (channelLeftArrow) {
  channelLeftArrow.addEventListener("click", function() {
    if(index < 6) {
        left = channelNavItems[index].offsetWidth;
        leftSum += left;
        slider.style.left = - leftSum + "px";
        index += 1;
    } else {
        return;
    }
  });
}
if (channelRightArrow) {
  channelRightArrow.addEventListener("click", function() {
    if(index > 0) {
        left = channelNavItems[index - 1].offsetWidth;
        leftSum -= left;
        slider.style.left = - leftSum + "px";
        index -= 1;
    } else {
        return;
    }
  });
}


let publicComment = document.querySelector("#public-comment-text");
let commentBtns = document.querySelector(".comment-btns-wrapper");
let commentWrapper = document.querySelector(".add-comment-wrapper");
let submitBtn = document.querySelector("#submit-public-comment");

//open the cancel and comment buttons and disable the comment button
if (publicComment) {
  publicComment.addEventListener("click", function() {
    commentWrapper.classList.toggle("active");
    commentBtns.style.display = "flex";
    submitBtn.disabled = true;
  });

  //if there is a value in the input field, enable comment button else disable it
  publicComment.addEventListener("input", function() {
    if(this.value) {
        submitBtn.disabled = false;
    } else {
        submitBtn.disabled = true;
    }
  });
}



//cancel posting a public comment
let cancelComment = document.querySelector("#cancel-public-comment");
if (cancelComment) {
  cancelComment.addEventListener("click", function(e) {
    //this should be used to check that the user inputs is correct before submission
    //NOTE: refer to the link below
    //https://stackoverflow.com/questions/3350247/how-to-prevent-form-from-being-submitted
    e.preventDefault();
    commentBtns.style.display = "none";
    commentWrapper.classList.toggle("active");
  });
}



let openReplyBox = event => {
  //only open the replybox that is in the tree where the event originated
  if (event.target.classList.contains("reply-btn")) {
      let commentReview = event.target.parentNode.parentNode;
      //NOTE: change nextElementSibling to nextSibling when serving content dynamically
      let replyBox = commentReview.nextElementSibling;
      replyBox.style.display = "flex";
  }
};

let commentReviews = document.querySelectorAll(".comment-review");
for(let i = 0; i < commentReviews.length; i++) {
  //we can go deep into the dom tree by attaching a listener to a specific element
  commentReviews[i].addEventListener("click", openReplyBox);
}

let submitReplyBtns = document.querySelectorAll(".submit-reply");
for(let submitReply of submitReplyBtns) {
  submitReply.disabled = true;
}


let cancelTheReply = event => {
  event.preventDefault(); //prevent the button from doing its default task - submitting
  let replyBox = event.target.parentNode.parentNode.parentNode;
  replyBox.style.display = "none";
};

let cancelReplies = document.querySelectorAll(".cancel-reply");
for(let cancelReply of cancelReplies) {
  cancelReply.addEventListener("click", cancelTheReply);
}

let replyBtnOnOff = event => {
  //NOTE: replace nextElementSibling and lastElementChild with nextSibling and lastChild when serving dynamically
  let replyBtn = event.target.parentNode.parentNode.lastElementChild.lastElementChild;
  if(event.target.value) {
      replyBtn.disabled = false;
  } else {
      replyBtn.disabled = true;
  }
};

let replyInputs = document.querySelectorAll(".reply-public-comment");
for(let replyInput of replyInputs) {
  replyInput.addEventListener("input", replyBtnOnOff);
}

let loggedin = function () {
  let signin = document.querySelector(".metube-signin");
  signin.style.display = "none";
  let signedin = document.querySelector(".signedin");
  signedin.style.display = "flex";
}
